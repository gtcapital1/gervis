# Istruzioni per il Deployment di Gervis

## File di deployment

Ho creato un archivio completo per il deployment: `gervis-deploy.tar.gz`

Questo archivio contiene tutti i file necessari per il deployment:
- server/
- client/
- shared/
- deploy/
- File di configurazione (package.json, tsconfig.json, drizzle.config.ts, vite.config.ts, theme.json, ecc.)

## Procedura di Deployment

1. **Preparazione del server**

```bash
# Installa Node.js e npm (se non già installati)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

# Installa PostgreSQL (se non già installato)
sudo apt-get install -y postgresql postgresql-contrib

# Installa PM2 globalmente
sudo npm install -g pm2
```

2. **Crea la directory dell'applicazione**

```bash
sudo mkdir -p /var/www/gervis
sudo chown $USER:$USER /var/www/gervis
```

3. **Copia l'archivio sul server**

```bash
# Dal tuo computer locale:
scp gervis-deploy.tar.gz utente@sito.it:/var/www/gervis/

# Sul server:
cd /var/www/gervis
tar -xzf gervis-deploy.tar.gz
```

4. **Configura il database PostgreSQL**

```bash
sudo -u postgres psql
```

Nel prompt di PostgreSQL:

```sql
CREATE DATABASE gervis;
CREATE USER gervisuser WITH ENCRYPTED PASSWORD 'password_sicura';
GRANT ALL PRIVILEGES ON DATABASE gervis TO gervisuser;
\q
```

Importa lo schema del database:

```bash
psql -U gervisuser -d gervis -a -f deploy/setup-database.sql
```

5. **Configura le variabili d'ambiente**

```bash
cp deploy/.env.example .env
nano .env
```

Modifica le seguenti variabili:
- `DATABASE_URL`: postgres://gervisuser:password_sicura@localhost:5432/gervis
- `SESSION_SECRET`: [Una stringa casuale sicura]
- `BASE_URL`: https://sito.it (o il tuo dominio)
- `EMAIL_HOST`, `EMAIL_PORT`, `EMAIL_USER`, `EMAIL_PASS`, `EMAIL_FROM`: I dettagli del tuo server SMTP

6. **Installa le dipendenze e compila l'applicazione**

```bash
npm install
npm run build
```

7. **Configura Nginx come reverse proxy**

```bash
sudo cp deploy/nginx.conf /etc/nginx/sites-available/gervis
sudo ln -s /etc/nginx/sites-available/gervis /etc/nginx/sites-enabled/
sudo nano /etc/nginx/sites-available/gervis
```

Modifica il file di configurazione di Nginx sostituendo `sito.it` con il tuo dominio.

```bash
sudo nginx -t
sudo systemctl restart nginx
```

8. **Avvia l'applicazione con PM2**

```bash
cp deploy/ecosystem.config.js .
pm2 start ecosystem.config.js
pm2 save
pm2 startup
```

9. **Verifica il funzionamento dell'applicazione**

Visita https://sito.it nel tuo browser.

10. **Aggiornamento dell'URL base (se necessario)**

Se hai bisogno di aggiornare l'URL base nell'applicazione:

```bash
node deploy/base-url-update.js
```

## Note aggiuntive

- **Certificato SSL**: Assicurati di configurare HTTPS con Let's Encrypt o un altro provider di certificati.
- **Backup**: Imposta backup regolari del database PostgreSQL.
- **Monitoraggio**: Utilizza PM2 per monitorare lo stato dell'applicazione.

## Risoluzione dei problemi

- Se l'applicazione non si avvia, controlla i log con `pm2 logs gervis`.
- Verifica che le porte necessarie (5000 per l'applicazione, 80/443 per Nginx) siano aperte nel firewall.
- Assicurati che le credenziali del database siano corrette nel file `.env`.