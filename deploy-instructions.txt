# Istruzioni per il deployment di Gervis

Ecco le istruzioni passo-passo per eseguire il deployment di Gervis sul tuo server AWS/VPS.

## Metodo 1: Build locale e deployment automatizzato (Raccomandato)

Questo metodo è consigliato perché:
- La build avviene nel tuo ambiente di sviluppo controllato
- Puoi verificare che tutto funzioni correttamente prima di caricare
- Il server richiede meno risorse (non deve fare la build)
- È più veloce e affidabile

### Passo 1: Prepara il pacchetto di deployment

Nel tuo ambiente di sviluppo:

```bash
# Vai alla directory principale del progetto
cd /percorso/del/progetto

# Rendi eseguibile lo script di preparazione
chmod +x deploy/prepare-for-deploy.sh

# Esegui lo script di preparazione
./deploy/prepare-for-deploy.sh
```

Lo script farà:
1. Installare le dipendenze se necessario
2. Eseguire la build del progetto
3. Creare un pacchetto con solo i file necessari per la produzione
4. Salvarlo come `gervis-deploy.tar.gz`

### Passo 2: Esegui il deployment sul server

Sempre nel tuo ambiente di sviluppo:

```bash
# Rendi eseguibile lo script di deployment
chmod +x deploy/scripts/deploy.sh

# Esegui lo script di deployment
./deploy/scripts/deploy.sh
```

Lo script chiederà:
- Indirizzo IP o nome host del server
- Nome utente SSH
- Percorso della chiave SSH (se necessario)
- Directory di destinazione sul server

Poi automaticamente:
1. Trasferirà il pacchetto sul server
2. Estrarrà i file nella directory di destinazione
3. Installerà le dipendenze di produzione
4. Configurerà l'ambiente
5. Avvierà o riavvierà l'applicazione

### Passo 3: Completa la configurazione del server (se necessario)

Se è la prima installazione, dovrai completare la configurazione:

```bash
ssh utente@server
cd /var/www/gervis
sudo ./deploy/scripts/setup-aws.sh
```

Lo script configurerà:
- Nginx con il tuo dominio
- HTTPS con Let's Encrypt (opzionale)
- PM2 per l'avvio automatico al riavvio

## Metodo 2: Deployment manuale (Alternativa)

Se preferisci un approccio più manuale, segui questi passaggi:

### Passo 1: Clona il repository sul server

```bash
ssh utente@server
sudo mkdir -p /var/www/gervis
sudo chown $USER:$USER /var/www/gervis
git clone https://github.com/gtcapital1/gervis.git /var/www/gervis
cd /var/www/gervis
```

### Passo 2: Configura l'ambiente

```bash
# Crea il file .env
./create-env-file.sh

# Configura l'ambiente
sudo ./deploy/scripts/setup-aws.sh
```

## Verifica dell'installazione

Dopo il deployment, verifica che tutto funzioni correttamente:

```bash
cd /var/www/gervis
./deploy/scripts/check-app-status.sh
```

## Risoluzione dei problemi

Se riscontri problemi:

1. **Nginx mostra la pagina predefinita**:
   ```bash
   sudo ./deploy/scripts/fix-nginx.sh
   ```

2. **Database non configurato**:
   ```bash
   ./run-db-push.sh
   ```

3. **L'applicazione non si avvia**:
   ```bash
   pm2 logs gervis
   ```

4. **Errori di permessi**:
   ```bash
   sudo chown -R $USER:$USER /var/www/gervis
   chmod +x deploy/scripts/*.sh
   ```

## Note aggiuntive

- Per aggiornare l'applicazione in futuro, ripeti solo il Metodo 1
- Le configurazioni (file .env, database) saranno preservate durante gli aggiornamenti
- Assicurati che i DNS del tuo dominio puntino all'IP del server

---

Per ulteriori dettagli, consulta il file `AWS-DEPLOY-README.md`.